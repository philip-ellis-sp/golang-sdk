/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// OwnerAllOf struct for OwnerAllOf
type OwnerAllOf struct {
	// The email of the identity
	Email *string `json:"email,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OwnerAllOf OwnerAllOf

// NewOwnerAllOf instantiates a new OwnerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerAllOf() *OwnerAllOf {
	this := OwnerAllOf{}
	return &this
}

// NewOwnerAllOfWithDefaults instantiates a new OwnerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerAllOfWithDefaults() *OwnerAllOf {
	this := OwnerAllOf{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *OwnerAllOf) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerAllOf) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *OwnerAllOf) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *OwnerAllOf) SetEmail(v string) {
	o.Email = &v
}

func (o OwnerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OwnerAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varOwnerAllOf := _OwnerAllOf{}

	if err = json.Unmarshal(bytes, &varOwnerAllOf); err == nil {
		*o = OwnerAllOf(varOwnerAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOwnerAllOf struct {
	value *OwnerAllOf
	isSet bool
}

func (v NullableOwnerAllOf) Get() *OwnerAllOf {
	return v.value
}

func (v *NullableOwnerAllOf) Set(val *OwnerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerAllOf(val *OwnerAllOf) *NullableOwnerAllOf {
	return &NullableOwnerAllOf{value: val, isSet: true}
}

func (v NullableOwnerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


