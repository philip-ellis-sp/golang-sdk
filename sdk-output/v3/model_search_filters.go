/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// SearchFilters struct for SearchFilters
type SearchFilters struct {
	Type *FilterType `json:"type,omitempty"`
	Range *Range `json:"range,omitempty"`
	// The terms to be filtered.
	Terms []string `json:"terms,omitempty"`
	// Indicates if the filter excludes results.
	Exclude *bool `json:"exclude,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchFilters SearchFilters

// NewSearchFilters instantiates a new SearchFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchFilters() *SearchFilters {
	this := SearchFilters{}
	var exclude bool = false
	this.Exclude = &exclude
	return &this
}

// NewSearchFiltersWithDefaults instantiates a new SearchFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchFiltersWithDefaults() *SearchFilters {
	this := SearchFilters{}
	var exclude bool = false
	this.Exclude = &exclude
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchFilters) GetType() FilterType {
	if o == nil || isNil(o.Type) {
		var ret FilterType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFilters) GetTypeOk() (*FilterType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchFilters) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given FilterType and assigns it to the Type field.
func (o *SearchFilters) SetType(v FilterType) {
	o.Type = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *SearchFilters) GetRange() Range {
	if o == nil || isNil(o.Range) {
		var ret Range
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFilters) GetRangeOk() (*Range, bool) {
	if o == nil || isNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *SearchFilters) HasRange() bool {
	if o != nil && !isNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given Range and assigns it to the Range field.
func (o *SearchFilters) SetRange(v Range) {
	o.Range = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *SearchFilters) GetTerms() []string {
	if o == nil || isNil(o.Terms) {
		var ret []string
		return ret
	}
	return o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFilters) GetTermsOk() ([]string, bool) {
	if o == nil || isNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *SearchFilters) HasTerms() bool {
	if o != nil && !isNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given []string and assigns it to the Terms field.
func (o *SearchFilters) SetTerms(v []string) {
	o.Terms = v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *SearchFilters) GetExclude() bool {
	if o == nil || isNil(o.Exclude) {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFilters) GetExcludeOk() (*bool, bool) {
	if o == nil || isNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *SearchFilters) HasExclude() bool {
	if o != nil && !isNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *SearchFilters) SetExclude(v bool) {
	o.Exclude = &v
}

func (o SearchFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !isNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	if !isNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SearchFilters) UnmarshalJSON(bytes []byte) (err error) {
	varSearchFilters := _SearchFilters{}

	if err = json.Unmarshal(bytes, &varSearchFilters); err == nil {
		*o = SearchFilters(varSearchFilters)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "range")
		delete(additionalProperties, "terms")
		delete(additionalProperties, "exclude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchFilters struct {
	value *SearchFilters
	isSet bool
}

func (v NullableSearchFilters) Get() *SearchFilters {
	return v.value
}

func (v *NullableSearchFilters) Set(val *SearchFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFilters(val *SearchFilters) *NullableSearchFilters {
	return &NullableSearchFilters{value: val, isSet: true}
}

func (v NullableSearchFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


