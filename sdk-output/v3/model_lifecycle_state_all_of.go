/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// LifecycleStateAllOf struct for LifecycleStateAllOf
type LifecycleStateAllOf struct {
	// Whether the lifecycle state is enabled or disabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The technical name for lifecycle state. This is for internal use.
	TechnicalName string `json:"technicalName"`
	// Lifecycle state description.
	Description *string `json:"description,omitempty"`
	// Number of identities that have the lifecycle state.
	IdentityCount *int32 `json:"identityCount,omitempty"`
	EmailNotificationOption *EmailNotificationOption `json:"emailNotificationOption,omitempty"`
	AccountActions []AccountAction `json:"accountActions,omitempty"`
	// List of unique access-profile IDs that are associated with the lifecycle state.
	AccessProfileIds []string `json:"accessProfileIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LifecycleStateAllOf LifecycleStateAllOf

// NewLifecycleStateAllOf instantiates a new LifecycleStateAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleStateAllOf(technicalName string) *LifecycleStateAllOf {
	this := LifecycleStateAllOf{}
	this.TechnicalName = technicalName
	return &this
}

// NewLifecycleStateAllOfWithDefaults instantiates a new LifecycleStateAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleStateAllOfWithDefaults() *LifecycleStateAllOf {
	this := LifecycleStateAllOf{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LifecycleStateAllOf) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleStateAllOf) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LifecycleStateAllOf) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LifecycleStateAllOf) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTechnicalName returns the TechnicalName field value
func (o *LifecycleStateAllOf) GetTechnicalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TechnicalName
}

// GetTechnicalNameOk returns a tuple with the TechnicalName field value
// and a boolean to check if the value has been set.
func (o *LifecycleStateAllOf) GetTechnicalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TechnicalName, true
}

// SetTechnicalName sets field value
func (o *LifecycleStateAllOf) SetTechnicalName(v string) {
	o.TechnicalName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LifecycleStateAllOf) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleStateAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LifecycleStateAllOf) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LifecycleStateAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetIdentityCount returns the IdentityCount field value if set, zero value otherwise.
func (o *LifecycleStateAllOf) GetIdentityCount() int32 {
	if o == nil || isNil(o.IdentityCount) {
		var ret int32
		return ret
	}
	return *o.IdentityCount
}

// GetIdentityCountOk returns a tuple with the IdentityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleStateAllOf) GetIdentityCountOk() (*int32, bool) {
	if o == nil || isNil(o.IdentityCount) {
		return nil, false
	}
	return o.IdentityCount, true
}

// HasIdentityCount returns a boolean if a field has been set.
func (o *LifecycleStateAllOf) HasIdentityCount() bool {
	if o != nil && !isNil(o.IdentityCount) {
		return true
	}

	return false
}

// SetIdentityCount gets a reference to the given int32 and assigns it to the IdentityCount field.
func (o *LifecycleStateAllOf) SetIdentityCount(v int32) {
	o.IdentityCount = &v
}

// GetEmailNotificationOption returns the EmailNotificationOption field value if set, zero value otherwise.
func (o *LifecycleStateAllOf) GetEmailNotificationOption() EmailNotificationOption {
	if o == nil || isNil(o.EmailNotificationOption) {
		var ret EmailNotificationOption
		return ret
	}
	return *o.EmailNotificationOption
}

// GetEmailNotificationOptionOk returns a tuple with the EmailNotificationOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleStateAllOf) GetEmailNotificationOptionOk() (*EmailNotificationOption, bool) {
	if o == nil || isNil(o.EmailNotificationOption) {
		return nil, false
	}
	return o.EmailNotificationOption, true
}

// HasEmailNotificationOption returns a boolean if a field has been set.
func (o *LifecycleStateAllOf) HasEmailNotificationOption() bool {
	if o != nil && !isNil(o.EmailNotificationOption) {
		return true
	}

	return false
}

// SetEmailNotificationOption gets a reference to the given EmailNotificationOption and assigns it to the EmailNotificationOption field.
func (o *LifecycleStateAllOf) SetEmailNotificationOption(v EmailNotificationOption) {
	o.EmailNotificationOption = &v
}

// GetAccountActions returns the AccountActions field value if set, zero value otherwise.
func (o *LifecycleStateAllOf) GetAccountActions() []AccountAction {
	if o == nil || isNil(o.AccountActions) {
		var ret []AccountAction
		return ret
	}
	return o.AccountActions
}

// GetAccountActionsOk returns a tuple with the AccountActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleStateAllOf) GetAccountActionsOk() ([]AccountAction, bool) {
	if o == nil || isNil(o.AccountActions) {
		return nil, false
	}
	return o.AccountActions, true
}

// HasAccountActions returns a boolean if a field has been set.
func (o *LifecycleStateAllOf) HasAccountActions() bool {
	if o != nil && !isNil(o.AccountActions) {
		return true
	}

	return false
}

// SetAccountActions gets a reference to the given []AccountAction and assigns it to the AccountActions field.
func (o *LifecycleStateAllOf) SetAccountActions(v []AccountAction) {
	o.AccountActions = v
}

// GetAccessProfileIds returns the AccessProfileIds field value if set, zero value otherwise.
func (o *LifecycleStateAllOf) GetAccessProfileIds() []string {
	if o == nil || isNil(o.AccessProfileIds) {
		var ret []string
		return ret
	}
	return o.AccessProfileIds
}

// GetAccessProfileIdsOk returns a tuple with the AccessProfileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleStateAllOf) GetAccessProfileIdsOk() ([]string, bool) {
	if o == nil || isNil(o.AccessProfileIds) {
		return nil, false
	}
	return o.AccessProfileIds, true
}

// HasAccessProfileIds returns a boolean if a field has been set.
func (o *LifecycleStateAllOf) HasAccessProfileIds() bool {
	if o != nil && !isNil(o.AccessProfileIds) {
		return true
	}

	return false
}

// SetAccessProfileIds gets a reference to the given []string and assigns it to the AccessProfileIds field.
func (o *LifecycleStateAllOf) SetAccessProfileIds(v []string) {
	o.AccessProfileIds = v
}

func (o LifecycleStateAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["technicalName"] = o.TechnicalName
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.IdentityCount) {
		toSerialize["identityCount"] = o.IdentityCount
	}
	if !isNil(o.EmailNotificationOption) {
		toSerialize["emailNotificationOption"] = o.EmailNotificationOption
	}
	if !isNil(o.AccountActions) {
		toSerialize["accountActions"] = o.AccountActions
	}
	if !isNil(o.AccessProfileIds) {
		toSerialize["accessProfileIds"] = o.AccessProfileIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LifecycleStateAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varLifecycleStateAllOf := _LifecycleStateAllOf{}

	if err = json.Unmarshal(bytes, &varLifecycleStateAllOf); err == nil {
		*o = LifecycleStateAllOf(varLifecycleStateAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "technicalName")
		delete(additionalProperties, "description")
		delete(additionalProperties, "identityCount")
		delete(additionalProperties, "emailNotificationOption")
		delete(additionalProperties, "accountActions")
		delete(additionalProperties, "accessProfileIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLifecycleStateAllOf struct {
	value *LifecycleStateAllOf
	isSet bool
}

func (v NullableLifecycleStateAllOf) Get() *LifecycleStateAllOf {
	return v.value
}

func (v *NullableLifecycleStateAllOf) Set(val *LifecycleStateAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleStateAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleStateAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleStateAllOf(val *LifecycleStateAllOf) *NullableLifecycleStateAllOf {
	return &NullableLifecycleStateAllOf{value: val, isSet: true}
}

func (v NullableLifecycleStateAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleStateAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


