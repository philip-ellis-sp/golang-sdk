/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
	"fmt"
)

// FilterType1 Enum representing the currently supported filter aggregation types. Additional values may be added in the future without notice.
type FilterType1 string

// List of FilterType_1
const (
	FILTERTYPE1_TERM FilterType1 = "TERM"
)

// All allowed values of FilterType1 enum
var AllowedFilterType1EnumValues = []FilterType1{
	"TERM",
}

func (v *FilterType1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterType1(value)
	for _, existing := range AllowedFilterType1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterType1", value)
}

// NewFilterType1FromValue returns a pointer to a valid FilterType1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterType1FromValue(v string) (*FilterType1, error) {
	ev := FilterType1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterType1: valid values are %v", v, AllowedFilterType1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterType1) IsValid() bool {
	for _, existing := range AllowedFilterType1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterType_1 value
func (v FilterType1) Ptr() *FilterType1 {
	return &v
}

type NullableFilterType1 struct {
	value *FilterType1
	isSet bool
}

func (v NullableFilterType1) Get() *FilterType1 {
	return v.value
}

func (v *NullableFilterType1) Set(val *FilterType1) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterType1) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterType1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterType1(val *FilterType1) *NullableFilterType1 {
	return &NullableFilterType1{value: val, isSet: true}
}

func (v NullableFilterType1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterType1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

