/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// BaseEntitlementAllOf struct for BaseEntitlementAllOf
type BaseEntitlementAllOf struct {
	// A description of the entitlement
	Description *string `json:"description,omitempty"`
	// The name of the entitlement attribute
	Attribute *string `json:"attribute,omitempty"`
	// The value of the entitlement
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BaseEntitlementAllOf BaseEntitlementAllOf

// NewBaseEntitlementAllOf instantiates a new BaseEntitlementAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEntitlementAllOf() *BaseEntitlementAllOf {
	this := BaseEntitlementAllOf{}
	return &this
}

// NewBaseEntitlementAllOfWithDefaults instantiates a new BaseEntitlementAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEntitlementAllOfWithDefaults() *BaseEntitlementAllOf {
	this := BaseEntitlementAllOf{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BaseEntitlementAllOf) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEntitlementAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BaseEntitlementAllOf) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BaseEntitlementAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *BaseEntitlementAllOf) GetAttribute() string {
	if o == nil || isNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEntitlementAllOf) GetAttributeOk() (*string, bool) {
	if o == nil || isNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *BaseEntitlementAllOf) HasAttribute() bool {
	if o != nil && !isNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *BaseEntitlementAllOf) SetAttribute(v string) {
	o.Attribute = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BaseEntitlementAllOf) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEntitlementAllOf) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BaseEntitlementAllOf) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *BaseEntitlementAllOf) SetValue(v string) {
	o.Value = &v
}

func (o BaseEntitlementAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BaseEntitlementAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varBaseEntitlementAllOf := _BaseEntitlementAllOf{}

	if err = json.Unmarshal(bytes, &varBaseEntitlementAllOf); err == nil {
		*o = BaseEntitlementAllOf(varBaseEntitlementAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "attribute")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseEntitlementAllOf struct {
	value *BaseEntitlementAllOf
	isSet bool
}

func (v NullableBaseEntitlementAllOf) Get() *BaseEntitlementAllOf {
	return v.value
}

func (v *NullableBaseEntitlementAllOf) Set(val *BaseEntitlementAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEntitlementAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEntitlementAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEntitlementAllOf(val *BaseEntitlementAllOf) *NullableBaseEntitlementAllOf {
	return &NullableBaseEntitlementAllOf{value: val, isSet: true}
}

func (v NullableBaseEntitlementAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEntitlementAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


