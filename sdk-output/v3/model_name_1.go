/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// Name1 struct for Name1
type Name1 struct {
	// The name of the scheduled search. 
	Name *string `json:"name,omitempty"`
	// The description of the scheduled search. 
	Description *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Name1 Name1

// NewName1 instantiates a new Name1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewName1() *Name1 {
	this := Name1{}
	return &this
}

// NewName1WithDefaults instantiates a new Name1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewName1WithDefaults() *Name1 {
	this := Name1{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Name1) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Name1) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Name1) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Name1) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Name1) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Name1) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Name1) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Name1) SetDescription(v string) {
	o.Description = &v
}

func (o Name1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Name1) UnmarshalJSON(bytes []byte) (err error) {
	varName1 := _Name1{}

	if err = json.Unmarshal(bytes, &varName1); err == nil {
		*o = Name1(varName1)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableName1 struct {
	value *Name1
	isSet bool
}

func (v NullableName1) Get() *Name1 {
	return v.value
}

func (v *NullableName1) Set(val *Name1) {
	v.value = val
	v.isSet = true
}

func (v NullableName1) IsSet() bool {
	return v.isSet
}

func (v *NullableName1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableName1(val *Name1) *NullableName1 {
	return &NullableName1{value: val, isSet: true}
}

func (v NullableName1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableName1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


