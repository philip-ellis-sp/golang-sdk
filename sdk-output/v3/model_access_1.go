/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
	"fmt"
)

// Access1 - struct for Access1
type Access1 struct {
	AccessProfile1 *AccessProfile1
	Entitlement1 *Entitlement1
	Role1 *Role1
}

// AccessProfile1AsAccess1 is a convenience function that returns AccessProfile1 wrapped in Access1
func AccessProfile1AsAccess1(v *AccessProfile1) Access1 {
	return Access1{
		AccessProfile1: v,
	}
}

// Entitlement1AsAccess1 is a convenience function that returns Entitlement1 wrapped in Access1
func Entitlement1AsAccess1(v *Entitlement1) Access1 {
	return Access1{
		Entitlement1: v,
	}
}

// Role1AsAccess1 is a convenience function that returns Role1 wrapped in Access1
func Role1AsAccess1(v *Role1) Access1 {
	return Access1{
		Role1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Access1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccessProfile1
	err = newStrictDecoder(data).Decode(&dst.AccessProfile1)
	if err == nil {
		jsonAccessProfile1, _ := json.Marshal(dst.AccessProfile1)
		if string(jsonAccessProfile1) == "{}" { // empty struct
			dst.AccessProfile1 = nil
		} else {
			match++
		}
	} else {
		dst.AccessProfile1 = nil
	}

	// try to unmarshal data into Entitlement1
	err = newStrictDecoder(data).Decode(&dst.Entitlement1)
	if err == nil {
		jsonEntitlement1, _ := json.Marshal(dst.Entitlement1)
		if string(jsonEntitlement1) == "{}" { // empty struct
			dst.Entitlement1 = nil
		} else {
			match++
		}
	} else {
		dst.Entitlement1 = nil
	}

	// try to unmarshal data into Role1
	err = newStrictDecoder(data).Decode(&dst.Role1)
	if err == nil {
		jsonRole1, _ := json.Marshal(dst.Role1)
		if string(jsonRole1) == "{}" { // empty struct
			dst.Role1 = nil
		} else {
			match++
		}
	} else {
		dst.Role1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccessProfile1 = nil
		dst.Entitlement1 = nil
		dst.Role1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Access1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Access1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Access1) MarshalJSON() ([]byte, error) {
	if src.AccessProfile1 != nil {
		return json.Marshal(&src.AccessProfile1)
	}

	if src.Entitlement1 != nil {
		return json.Marshal(&src.Entitlement1)
	}

	if src.Role1 != nil {
		return json.Marshal(&src.Role1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Access1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccessProfile1 != nil {
		return obj.AccessProfile1
	}

	if obj.Entitlement1 != nil {
		return obj.Entitlement1
	}

	if obj.Role1 != nil {
		return obj.Role1
	}

	// all schemas are nil
	return nil
}

type NullableAccess1 struct {
	value *Access1
	isSet bool
}

func (v NullableAccess1) Get() *Access1 {
	return v.value
}

func (v *NullableAccess1) Set(val *Access1) {
	v.value = val
	v.isSet = true
}

func (v NullableAccess1) IsSet() bool {
	return v.isSet
}

func (v *NullableAccess1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccess1(val *Access1) *NullableAccess1 {
	return &NullableAccess1{value: val, isSet: true}
}

func (v NullableAccess1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccess1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


