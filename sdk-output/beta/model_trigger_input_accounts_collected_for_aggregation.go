/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointbetasdk

import (
	"encoding/json"
	"time"
)

// TriggerInputAccountsCollectedForAggregation struct for TriggerInputAccountsCollectedForAggregation
type TriggerInputAccountsCollectedForAggregation struct {
	Source TriggerInputAccountsCollectedForAggregationSource `json:"source"`
	// The overall status of the collection.
	Status map[string]interface{} `json:"status"`
	// The date and time when the account collection started.
	Started time.Time `json:"started"`
	// The date and time when the account collection finished.
	Completed time.Time `json:"completed"`
	// A list of errors that occurred during the collection.
	Errors []string `json:"errors"`
	// A list of warnings that occurred during the collection.
	Warnings []string `json:"warnings"`
	Stats TriggerInputAccountsCollectedForAggregationStats `json:"stats"`
	AdditionalProperties map[string]interface{}
}

type _TriggerInputAccountsCollectedForAggregation TriggerInputAccountsCollectedForAggregation

// NewTriggerInputAccountsCollectedForAggregation instantiates a new TriggerInputAccountsCollectedForAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerInputAccountsCollectedForAggregation(source TriggerInputAccountsCollectedForAggregationSource, status map[string]interface{}, started time.Time, completed time.Time, errors []string, warnings []string, stats TriggerInputAccountsCollectedForAggregationStats) *TriggerInputAccountsCollectedForAggregation {
	this := TriggerInputAccountsCollectedForAggregation{}
	this.Source = source
	this.Status = status
	this.Started = started
	this.Completed = completed
	this.Errors = errors
	this.Warnings = warnings
	this.Stats = stats
	return &this
}

// NewTriggerInputAccountsCollectedForAggregationWithDefaults instantiates a new TriggerInputAccountsCollectedForAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerInputAccountsCollectedForAggregationWithDefaults() *TriggerInputAccountsCollectedForAggregation {
	this := TriggerInputAccountsCollectedForAggregation{}
	return &this
}

// GetSource returns the Source field value
func (o *TriggerInputAccountsCollectedForAggregation) GetSource() TriggerInputAccountsCollectedForAggregationSource {
	if o == nil {
		var ret TriggerInputAccountsCollectedForAggregationSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TriggerInputAccountsCollectedForAggregation) GetSourceOk() (*TriggerInputAccountsCollectedForAggregationSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TriggerInputAccountsCollectedForAggregation) SetSource(v TriggerInputAccountsCollectedForAggregationSource) {
	o.Source = v
}

// GetStatus returns the Status field value
func (o *TriggerInputAccountsCollectedForAggregation) GetStatus() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TriggerInputAccountsCollectedForAggregation) GetStatusOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *TriggerInputAccountsCollectedForAggregation) SetStatus(v map[string]interface{}) {
	o.Status = v
}

// GetStarted returns the Started field value
func (o *TriggerInputAccountsCollectedForAggregation) GetStarted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Started
}

// GetStartedOk returns a tuple with the Started field value
// and a boolean to check if the value has been set.
func (o *TriggerInputAccountsCollectedForAggregation) GetStartedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Started, true
}

// SetStarted sets field value
func (o *TriggerInputAccountsCollectedForAggregation) SetStarted(v time.Time) {
	o.Started = v
}

// GetCompleted returns the Completed field value
func (o *TriggerInputAccountsCollectedForAggregation) GetCompleted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *TriggerInputAccountsCollectedForAggregation) GetCompletedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *TriggerInputAccountsCollectedForAggregation) SetCompleted(v time.Time) {
	o.Completed = v
}

// GetErrors returns the Errors field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *TriggerInputAccountsCollectedForAggregation) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TriggerInputAccountsCollectedForAggregation) GetErrorsOk() ([]string, bool) {
	if o == nil || isNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *TriggerInputAccountsCollectedForAggregation) SetErrors(v []string) {
	o.Errors = v
}

// GetWarnings returns the Warnings field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *TriggerInputAccountsCollectedForAggregation) GetWarnings() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TriggerInputAccountsCollectedForAggregation) GetWarningsOk() ([]string, bool) {
	if o == nil || isNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// SetWarnings sets field value
func (o *TriggerInputAccountsCollectedForAggregation) SetWarnings(v []string) {
	o.Warnings = v
}

// GetStats returns the Stats field value
func (o *TriggerInputAccountsCollectedForAggregation) GetStats() TriggerInputAccountsCollectedForAggregationStats {
	if o == nil {
		var ret TriggerInputAccountsCollectedForAggregationStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *TriggerInputAccountsCollectedForAggregation) GetStatsOk() (*TriggerInputAccountsCollectedForAggregationStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *TriggerInputAccountsCollectedForAggregation) SetStats(v TriggerInputAccountsCollectedForAggregationStats) {
	o.Stats = v
}

func (o TriggerInputAccountsCollectedForAggregation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["started"] = o.Started
	}
	if true {
		toSerialize["completed"] = o.Completed
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	if true {
		toSerialize["stats"] = o.Stats
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TriggerInputAccountsCollectedForAggregation) UnmarshalJSON(bytes []byte) (err error) {
	varTriggerInputAccountsCollectedForAggregation := _TriggerInputAccountsCollectedForAggregation{}

	if err = json.Unmarshal(bytes, &varTriggerInputAccountsCollectedForAggregation); err == nil {
		*o = TriggerInputAccountsCollectedForAggregation(varTriggerInputAccountsCollectedForAggregation)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "source")
		delete(additionalProperties, "status")
		delete(additionalProperties, "started")
		delete(additionalProperties, "completed")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "warnings")
		delete(additionalProperties, "stats")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTriggerInputAccountsCollectedForAggregation struct {
	value *TriggerInputAccountsCollectedForAggregation
	isSet bool
}

func (v NullableTriggerInputAccountsCollectedForAggregation) Get() *TriggerInputAccountsCollectedForAggregation {
	return v.value
}

func (v *NullableTriggerInputAccountsCollectedForAggregation) Set(val *TriggerInputAccountsCollectedForAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerInputAccountsCollectedForAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerInputAccountsCollectedForAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerInputAccountsCollectedForAggregation(val *TriggerInputAccountsCollectedForAggregation) *NullableTriggerInputAccountsCollectedForAggregation {
	return &NullableTriggerInputAccountsCollectedForAggregation{value: val, isSet: true}
}

func (v NullableTriggerInputAccountsCollectedForAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerInputAccountsCollectedForAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


