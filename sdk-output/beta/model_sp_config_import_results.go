/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointbetasdk

import (
	"encoding/json"
)

// SpConfigImportResults Response Body for Config Import command.
type SpConfigImportResults struct {
	// The results of an object configuration import job.
	Results map[string]ObjectImportResult `json:"results"`
	AdditionalProperties map[string]interface{}
}

type _SpConfigImportResults SpConfigImportResults

// NewSpConfigImportResults instantiates a new SpConfigImportResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpConfigImportResults(results map[string]ObjectImportResult) *SpConfigImportResults {
	this := SpConfigImportResults{}
	this.Results = results
	return &this
}

// NewSpConfigImportResultsWithDefaults instantiates a new SpConfigImportResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpConfigImportResultsWithDefaults() *SpConfigImportResults {
	this := SpConfigImportResults{}
	return &this
}

// GetResults returns the Results field value
func (o *SpConfigImportResults) GetResults() map[string]ObjectImportResult {
	if o == nil {
		var ret map[string]ObjectImportResult
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *SpConfigImportResults) GetResultsOk() (*map[string]ObjectImportResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Results, true
}

// SetResults sets field value
func (o *SpConfigImportResults) SetResults(v map[string]ObjectImportResult) {
	o.Results = v
}

func (o SpConfigImportResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SpConfigImportResults) UnmarshalJSON(bytes []byte) (err error) {
	varSpConfigImportResults := _SpConfigImportResults{}

	if err = json.Unmarshal(bytes, &varSpConfigImportResults); err == nil {
		*o = SpConfigImportResults(varSpConfigImportResults)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpConfigImportResults struct {
	value *SpConfigImportResults
	isSet bool
}

func (v NullableSpConfigImportResults) Get() *SpConfigImportResults {
	return v.value
}

func (v *NullableSpConfigImportResults) Set(val *SpConfigImportResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSpConfigImportResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSpConfigImportResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpConfigImportResults(val *SpConfigImportResults) *NullableSpConfigImportResults {
	return &NullableSpConfigImportResults{value: val, isSet: true}
}

func (v NullableSpConfigImportResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpConfigImportResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


