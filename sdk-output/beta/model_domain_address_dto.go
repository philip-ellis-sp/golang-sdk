/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// DomainAddressDto struct for DomainAddressDto
type DomainAddressDto struct {
	// A domain address
	Domain *string `json:"domain,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DomainAddressDto DomainAddressDto

// NewDomainAddressDto instantiates a new DomainAddressDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainAddressDto() *DomainAddressDto {
	this := DomainAddressDto{}
	return &this
}

// NewDomainAddressDtoWithDefaults instantiates a new DomainAddressDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainAddressDtoWithDefaults() *DomainAddressDto {
	this := DomainAddressDto{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *DomainAddressDto) GetDomain() string {
	if o == nil || isNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainAddressDto) GetDomainOk() (*string, bool) {
	if o == nil || isNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *DomainAddressDto) HasDomain() bool {
	if o != nil && !isNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *DomainAddressDto) SetDomain(v string) {
	o.Domain = &v
}

func (o DomainAddressDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DomainAddressDto) UnmarshalJSON(bytes []byte) (err error) {
	varDomainAddressDto := _DomainAddressDto{}

	if err = json.Unmarshal(bytes, &varDomainAddressDto); err == nil {
		*o = DomainAddressDto(varDomainAddressDto)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "domain")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDomainAddressDto struct {
	value *DomainAddressDto
	isSet bool
}

func (v NullableDomainAddressDto) Get() *DomainAddressDto {
	return v.value
}

func (v *NullableDomainAddressDto) Set(val *DomainAddressDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainAddressDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainAddressDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainAddressDto(val *DomainAddressDto) *NullableDomainAddressDto {
	return &NullableDomainAddressDto{value: val, isSet: true}
}

func (v NullableDomainAddressDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainAddressDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


