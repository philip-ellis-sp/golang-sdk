/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointbetasdk

import (
	"encoding/json"
	"time"
)

// TriggerInputSourceDeleted struct for TriggerInputSourceDeleted
type TriggerInputSourceDeleted struct {
	// The unique ID of the source.
	Id string `json:"id"`
	// Human friendly name of the source.
	Name string `json:"name"`
	// The connection type.
	Type string `json:"type"`
	// The date and time the source was deleted.
	Deleted time.Time `json:"deleted"`
	// The connector type used to connect to the source.
	Connector string `json:"connector"`
	Actor TriggerInputSourceDeletedActor `json:"actor"`
	AdditionalProperties map[string]interface{}
}

type _TriggerInputSourceDeleted TriggerInputSourceDeleted

// NewTriggerInputSourceDeleted instantiates a new TriggerInputSourceDeleted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerInputSourceDeleted(id string, name string, type_ string, deleted time.Time, connector string, actor TriggerInputSourceDeletedActor) *TriggerInputSourceDeleted {
	this := TriggerInputSourceDeleted{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.Deleted = deleted
	this.Connector = connector
	this.Actor = actor
	return &this
}

// NewTriggerInputSourceDeletedWithDefaults instantiates a new TriggerInputSourceDeleted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerInputSourceDeletedWithDefaults() *TriggerInputSourceDeleted {
	this := TriggerInputSourceDeleted{}
	return &this
}

// GetId returns the Id field value
func (o *TriggerInputSourceDeleted) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TriggerInputSourceDeleted) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TriggerInputSourceDeleted) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TriggerInputSourceDeleted) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TriggerInputSourceDeleted) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TriggerInputSourceDeleted) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *TriggerInputSourceDeleted) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TriggerInputSourceDeleted) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TriggerInputSourceDeleted) SetType(v string) {
	o.Type = v
}

// GetDeleted returns the Deleted field value
func (o *TriggerInputSourceDeleted) GetDeleted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *TriggerInputSourceDeleted) GetDeletedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *TriggerInputSourceDeleted) SetDeleted(v time.Time) {
	o.Deleted = v
}

// GetConnector returns the Connector field value
func (o *TriggerInputSourceDeleted) GetConnector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *TriggerInputSourceDeleted) GetConnectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *TriggerInputSourceDeleted) SetConnector(v string) {
	o.Connector = v
}

// GetActor returns the Actor field value
func (o *TriggerInputSourceDeleted) GetActor() TriggerInputSourceDeletedActor {
	if o == nil {
		var ret TriggerInputSourceDeletedActor
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *TriggerInputSourceDeleted) GetActorOk() (*TriggerInputSourceDeletedActor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *TriggerInputSourceDeleted) SetActor(v TriggerInputSourceDeletedActor) {
	o.Actor = v
}

func (o TriggerInputSourceDeleted) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["deleted"] = o.Deleted
	}
	if true {
		toSerialize["connector"] = o.Connector
	}
	if true {
		toSerialize["actor"] = o.Actor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TriggerInputSourceDeleted) UnmarshalJSON(bytes []byte) (err error) {
	varTriggerInputSourceDeleted := _TriggerInputSourceDeleted{}

	if err = json.Unmarshal(bytes, &varTriggerInputSourceDeleted); err == nil {
		*o = TriggerInputSourceDeleted(varTriggerInputSourceDeleted)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "deleted")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "actor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTriggerInputSourceDeleted struct {
	value *TriggerInputSourceDeleted
	isSet bool
}

func (v NullableTriggerInputSourceDeleted) Get() *TriggerInputSourceDeleted {
	return v.value
}

func (v *NullableTriggerInputSourceDeleted) Set(val *TriggerInputSourceDeleted) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerInputSourceDeleted) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerInputSourceDeleted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerInputSourceDeleted(val *TriggerInputSourceDeleted) *NullableTriggerInputSourceDeleted {
	return &NullableTriggerInputSourceDeleted{value: val, isSet: true}
}

func (v NullableTriggerInputSourceDeleted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerInputSourceDeleted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


