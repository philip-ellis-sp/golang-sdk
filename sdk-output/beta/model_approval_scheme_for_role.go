/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// ApprovalSchemeForRole struct for ApprovalSchemeForRole
type ApprovalSchemeForRole struct {
	// Describes the individual or group that is responsible for an approval step. Values are as follows.  **OWNER**: Owner of the associated Role  **MANAGER**: Manager of the Identity making the request  **GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field
	ApproverType *string `json:"approverType,omitempty"`
	// Id of the specific approver, used only when approverType is GOVERNANCE_GROUP
	ApproverId *string `json:"approverId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalSchemeForRole ApprovalSchemeForRole

// NewApprovalSchemeForRole instantiates a new ApprovalSchemeForRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalSchemeForRole() *ApprovalSchemeForRole {
	this := ApprovalSchemeForRole{}
	return &this
}

// NewApprovalSchemeForRoleWithDefaults instantiates a new ApprovalSchemeForRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalSchemeForRoleWithDefaults() *ApprovalSchemeForRole {
	this := ApprovalSchemeForRole{}
	return &this
}

// GetApproverType returns the ApproverType field value if set, zero value otherwise.
func (o *ApprovalSchemeForRole) GetApproverType() string {
	if o == nil || isNil(o.ApproverType) {
		var ret string
		return ret
	}
	return *o.ApproverType
}

// GetApproverTypeOk returns a tuple with the ApproverType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalSchemeForRole) GetApproverTypeOk() (*string, bool) {
	if o == nil || isNil(o.ApproverType) {
		return nil, false
	}
	return o.ApproverType, true
}

// HasApproverType returns a boolean if a field has been set.
func (o *ApprovalSchemeForRole) HasApproverType() bool {
	if o != nil && !isNil(o.ApproverType) {
		return true
	}

	return false
}

// SetApproverType gets a reference to the given string and assigns it to the ApproverType field.
func (o *ApprovalSchemeForRole) SetApproverType(v string) {
	o.ApproverType = &v
}

// GetApproverId returns the ApproverId field value if set, zero value otherwise.
func (o *ApprovalSchemeForRole) GetApproverId() string {
	if o == nil || isNil(o.ApproverId) {
		var ret string
		return ret
	}
	return *o.ApproverId
}

// GetApproverIdOk returns a tuple with the ApproverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalSchemeForRole) GetApproverIdOk() (*string, bool) {
	if o == nil || isNil(o.ApproverId) {
		return nil, false
	}
	return o.ApproverId, true
}

// HasApproverId returns a boolean if a field has been set.
func (o *ApprovalSchemeForRole) HasApproverId() bool {
	if o != nil && !isNil(o.ApproverId) {
		return true
	}

	return false
}

// SetApproverId gets a reference to the given string and assigns it to the ApproverId field.
func (o *ApprovalSchemeForRole) SetApproverId(v string) {
	o.ApproverId = &v
}

func (o ApprovalSchemeForRole) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ApproverType) {
		toSerialize["approverType"] = o.ApproverType
	}
	if !isNil(o.ApproverId) {
		toSerialize["approverId"] = o.ApproverId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ApprovalSchemeForRole) UnmarshalJSON(bytes []byte) (err error) {
	varApprovalSchemeForRole := _ApprovalSchemeForRole{}

	if err = json.Unmarshal(bytes, &varApprovalSchemeForRole); err == nil {
		*o = ApprovalSchemeForRole(varApprovalSchemeForRole)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "approverType")
		delete(additionalProperties, "approverId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalSchemeForRole struct {
	value *ApprovalSchemeForRole
	isSet bool
}

func (v NullableApprovalSchemeForRole) Get() *ApprovalSchemeForRole {
	return v.value
}

func (v *NullableApprovalSchemeForRole) Set(val *ApprovalSchemeForRole) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalSchemeForRole) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalSchemeForRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalSchemeForRole(val *ApprovalSchemeForRole) *NullableApprovalSchemeForRole {
	return &NullableApprovalSchemeForRole{value: val, isSet: true}
}

func (v NullableApprovalSchemeForRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalSchemeForRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


