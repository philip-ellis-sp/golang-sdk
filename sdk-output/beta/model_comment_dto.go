/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// CommentDto struct for CommentDto
type CommentDto struct {
	Comment *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommentDto CommentDto

// NewCommentDto instantiates a new CommentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentDto() *CommentDto {
	this := CommentDto{}
	return &this
}

// NewCommentDtoWithDefaults instantiates a new CommentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentDtoWithDefaults() *CommentDto {
	this := CommentDto{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CommentDto) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentDto) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CommentDto) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CommentDto) SetComment(v string) {
	o.Comment = &v
}

func (o CommentDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CommentDto) UnmarshalJSON(bytes []byte) (err error) {
	varCommentDto := _CommentDto{}

	if err = json.Unmarshal(bytes, &varCommentDto); err == nil {
		*o = CommentDto(varCommentDto)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommentDto struct {
	value *CommentDto
	isSet bool
}

func (v NullableCommentDto) Get() *CommentDto {
	return v.value
}

func (v *NullableCommentDto) Set(val *CommentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentDto(val *CommentDto) *NullableCommentDto {
	return &NullableCommentDto{value: val, isSet: true}
}

func (v NullableCommentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


