/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointbetasdk

import (
	"encoding/json"
	"fmt"
)

// GetEvents200ResponseInner struct for GetEvents200ResponseInner
type GetEvents200ResponseInner struct {
	AccessItemAssociatedvar *AccessItemAssociated
	AccessItemRemovedvar *AccessItemRemoved
	AccessRequestedvar *AccessRequested
	AccountStatusChangedvar *AccountStatusChanged
	AttributesChangedvar *AttributesChanged
	IdentityCertifiedvar *IdentityCertified
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *GetEvents200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AccessItemAssociatedvar
	err = json.Unmarshal(data, &dst.AccessItemAssociatedvar);
	if err == nil {
		jsonAccessItemAssociatedvar, _ := json.Marshal(dst.AccessItemAssociatedvar)
		if string(jsonAccessItemAssociatedvar) == "{}" { // empty struct
			dst.AccessItemAssociatedvar = nil
		} else {
			return nil // data stored in dst.AccessItemAssociatedvar, return on the first match
		}
	} else {
		dst.AccessItemAssociatedvar = nil
	}

	// try to unmarshal JSON data into AccessItemRemovedvar
	err = json.Unmarshal(data, &dst.AccessItemRemovedvar);
	if err == nil {
		jsonAccessItemRemovedvar, _ := json.Marshal(dst.AccessItemRemovedvar)
		if string(jsonAccessItemRemovedvar) == "{}" { // empty struct
			dst.AccessItemRemovedvar = nil
		} else {
			return nil // data stored in dst.AccessItemRemovedvar, return on the first match
		}
	} else {
		dst.AccessItemRemovedvar = nil
	}

	// try to unmarshal JSON data into AccessRequestedvar
	err = json.Unmarshal(data, &dst.AccessRequestedvar);
	if err == nil {
		jsonAccessRequestedvar, _ := json.Marshal(dst.AccessRequestedvar)
		if string(jsonAccessRequestedvar) == "{}" { // empty struct
			dst.AccessRequestedvar = nil
		} else {
			return nil // data stored in dst.AccessRequestedvar, return on the first match
		}
	} else {
		dst.AccessRequestedvar = nil
	}

	// try to unmarshal JSON data into AccountStatusChangedvar
	err = json.Unmarshal(data, &dst.AccountStatusChangedvar);
	if err == nil {
		jsonAccountStatusChangedvar, _ := json.Marshal(dst.AccountStatusChangedvar)
		if string(jsonAccountStatusChangedvar) == "{}" { // empty struct
			dst.AccountStatusChangedvar = nil
		} else {
			return nil // data stored in dst.AccountStatusChangedvar, return on the first match
		}
	} else {
		dst.AccountStatusChangedvar = nil
	}

	// try to unmarshal JSON data into AttributesChangedvar
	err = json.Unmarshal(data, &dst.AttributesChangedvar);
	if err == nil {
		jsonAttributesChangedvar, _ := json.Marshal(dst.AttributesChangedvar)
		if string(jsonAttributesChangedvar) == "{}" { // empty struct
			dst.AttributesChangedvar = nil
		} else {
			return nil // data stored in dst.AttributesChangedvar, return on the first match
		}
	} else {
		dst.AttributesChangedvar = nil
	}

	// try to unmarshal JSON data into IdentityCertifiedvar
	err = json.Unmarshal(data, &dst.IdentityCertifiedvar);
	if err == nil {
		jsonIdentityCertifiedvar, _ := json.Marshal(dst.IdentityCertifiedvar)
		if string(jsonIdentityCertifiedvar) == "{}" { // empty struct
			dst.IdentityCertifiedvar = nil
		} else {
			return nil // data stored in dst.IdentityCertifiedvar, return on the first match
		}
	} else {
		dst.IdentityCertifiedvar = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(GetEvents200ResponseInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *GetEvents200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.AccessItemAssociatedvar != nil {
		return json.Marshal(&src.AccessItemAssociatedvar)
	}

	if src.AccessItemRemovedvar != nil {
		return json.Marshal(&src.AccessItemRemovedvar)
	}

	if src.AccessRequestedvar != nil {
		return json.Marshal(&src.AccessRequestedvar)
	}

	if src.AccountStatusChangedvar != nil {
		return json.Marshal(&src.AccountStatusChangedvar)
	}

	if src.AttributesChangedvar != nil {
		return json.Marshal(&src.AttributesChangedvar)
	}

	if src.IdentityCertifiedvar != nil {
		return json.Marshal(&src.IdentityCertifiedvar)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableGetEvents200ResponseInner struct {
	value *GetEvents200ResponseInner
	isSet bool
}

func (v NullableGetEvents200ResponseInner) Get() *GetEvents200ResponseInner {
	return v.value
}

func (v *NullableGetEvents200ResponseInner) Set(val *GetEvents200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200ResponseInner(val *GetEvents200ResponseInner) *NullableGetEvents200ResponseInner {
	return &NullableGetEvents200ResponseInner{value: val, isSet: true}
}

func (v NullableGetEvents200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


