/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
	"time"
)

// NonEmployeeSourceAllOf struct for NonEmployeeSourceAllOf
type NonEmployeeSourceAllOf struct {
	// List of approvers
	Approvers []IdentityReferenceWithId `json:"approvers,omitempty"`
	// List of account managers
	AccountManagers []IdentityReferenceWithId `json:"accountManagers,omitempty"`
	// When the request was last modified.
	Modified *time.Time `json:"modified,omitempty"`
	// When the request was created.
	Created *time.Time `json:"created,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NonEmployeeSourceAllOf NonEmployeeSourceAllOf

// NewNonEmployeeSourceAllOf instantiates a new NonEmployeeSourceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonEmployeeSourceAllOf() *NonEmployeeSourceAllOf {
	this := NonEmployeeSourceAllOf{}
	return &this
}

// NewNonEmployeeSourceAllOfWithDefaults instantiates a new NonEmployeeSourceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonEmployeeSourceAllOfWithDefaults() *NonEmployeeSourceAllOf {
	this := NonEmployeeSourceAllOf{}
	return &this
}

// GetApprovers returns the Approvers field value if set, zero value otherwise.
func (o *NonEmployeeSourceAllOf) GetApprovers() []IdentityReferenceWithId {
	if o == nil || isNil(o.Approvers) {
		var ret []IdentityReferenceWithId
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceAllOf) GetApproversOk() ([]IdentityReferenceWithId, bool) {
	if o == nil || isNil(o.Approvers) {
		return nil, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *NonEmployeeSourceAllOf) HasApprovers() bool {
	if o != nil && !isNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given []IdentityReferenceWithId and assigns it to the Approvers field.
func (o *NonEmployeeSourceAllOf) SetApprovers(v []IdentityReferenceWithId) {
	o.Approvers = v
}

// GetAccountManagers returns the AccountManagers field value if set, zero value otherwise.
func (o *NonEmployeeSourceAllOf) GetAccountManagers() []IdentityReferenceWithId {
	if o == nil || isNil(o.AccountManagers) {
		var ret []IdentityReferenceWithId
		return ret
	}
	return o.AccountManagers
}

// GetAccountManagersOk returns a tuple with the AccountManagers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceAllOf) GetAccountManagersOk() ([]IdentityReferenceWithId, bool) {
	if o == nil || isNil(o.AccountManagers) {
		return nil, false
	}
	return o.AccountManagers, true
}

// HasAccountManagers returns a boolean if a field has been set.
func (o *NonEmployeeSourceAllOf) HasAccountManagers() bool {
	if o != nil && !isNil(o.AccountManagers) {
		return true
	}

	return false
}

// SetAccountManagers gets a reference to the given []IdentityReferenceWithId and assigns it to the AccountManagers field.
func (o *NonEmployeeSourceAllOf) SetAccountManagers(v []IdentityReferenceWithId) {
	o.AccountManagers = v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *NonEmployeeSourceAllOf) GetModified() time.Time {
	if o == nil || isNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceAllOf) GetModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *NonEmployeeSourceAllOf) HasModified() bool {
	if o != nil && !isNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *NonEmployeeSourceAllOf) SetModified(v time.Time) {
	o.Modified = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *NonEmployeeSourceAllOf) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceAllOf) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *NonEmployeeSourceAllOf) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *NonEmployeeSourceAllOf) SetCreated(v time.Time) {
	o.Created = &v
}

func (o NonEmployeeSourceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Approvers) {
		toSerialize["approvers"] = o.Approvers
	}
	if !isNil(o.AccountManagers) {
		toSerialize["accountManagers"] = o.AccountManagers
	}
	if !isNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NonEmployeeSourceAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varNonEmployeeSourceAllOf := _NonEmployeeSourceAllOf{}

	if err = json.Unmarshal(bytes, &varNonEmployeeSourceAllOf); err == nil {
		*o = NonEmployeeSourceAllOf(varNonEmployeeSourceAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "approvers")
		delete(additionalProperties, "accountManagers")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "created")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNonEmployeeSourceAllOf struct {
	value *NonEmployeeSourceAllOf
	isSet bool
}

func (v NullableNonEmployeeSourceAllOf) Get() *NonEmployeeSourceAllOf {
	return v.value
}

func (v *NullableNonEmployeeSourceAllOf) Set(val *NonEmployeeSourceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNonEmployeeSourceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNonEmployeeSourceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonEmployeeSourceAllOf(val *NonEmployeeSourceAllOf) *NullableNonEmployeeSourceAllOf {
	return &NullableNonEmployeeSourceAllOf{value: val, isSet: true}
}

func (v NullableNonEmployeeSourceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonEmployeeSourceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


