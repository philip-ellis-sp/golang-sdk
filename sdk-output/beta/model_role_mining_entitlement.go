/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// RoleMiningEntitlement struct for RoleMiningEntitlement
type RoleMiningEntitlement struct {
	EntitlementRef *RoleMiningEntitlementRef `json:"entitlementRef,omitempty"`
	// Name of the entitlement
	Name *string `json:"name,omitempty"`
	// Application name of the entitlement
	ApplicationName *string `json:"applicationName,omitempty"`
	// The number of identities with this entitlement in a role.
	IdentityCount *int32 `json:"identityCount,omitempty"`
	// The % popularity of this entitlement in a role.
	Popularity *int32 `json:"popularity,omitempty"`
	// TThe % popularity of this entitlement in the org.
	PopularityInOrg *int32 `json:"popularityInOrg,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleMiningEntitlement RoleMiningEntitlement

// NewRoleMiningEntitlement instantiates a new RoleMiningEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMiningEntitlement() *RoleMiningEntitlement {
	this := RoleMiningEntitlement{}
	return &this
}

// NewRoleMiningEntitlementWithDefaults instantiates a new RoleMiningEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMiningEntitlementWithDefaults() *RoleMiningEntitlement {
	this := RoleMiningEntitlement{}
	return &this
}

// GetEntitlementRef returns the EntitlementRef field value if set, zero value otherwise.
func (o *RoleMiningEntitlement) GetEntitlementRef() RoleMiningEntitlementRef {
	if o == nil || isNil(o.EntitlementRef) {
		var ret RoleMiningEntitlementRef
		return ret
	}
	return *o.EntitlementRef
}

// GetEntitlementRefOk returns a tuple with the EntitlementRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningEntitlement) GetEntitlementRefOk() (*RoleMiningEntitlementRef, bool) {
	if o == nil || isNil(o.EntitlementRef) {
		return nil, false
	}
	return o.EntitlementRef, true
}

// HasEntitlementRef returns a boolean if a field has been set.
func (o *RoleMiningEntitlement) HasEntitlementRef() bool {
	if o != nil && !isNil(o.EntitlementRef) {
		return true
	}

	return false
}

// SetEntitlementRef gets a reference to the given RoleMiningEntitlementRef and assigns it to the EntitlementRef field.
func (o *RoleMiningEntitlement) SetEntitlementRef(v RoleMiningEntitlementRef) {
	o.EntitlementRef = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleMiningEntitlement) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningEntitlement) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleMiningEntitlement) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleMiningEntitlement) SetName(v string) {
	o.Name = &v
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *RoleMiningEntitlement) GetApplicationName() string {
	if o == nil || isNil(o.ApplicationName) {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningEntitlement) GetApplicationNameOk() (*string, bool) {
	if o == nil || isNil(o.ApplicationName) {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *RoleMiningEntitlement) HasApplicationName() bool {
	if o != nil && !isNil(o.ApplicationName) {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *RoleMiningEntitlement) SetApplicationName(v string) {
	o.ApplicationName = &v
}

// GetIdentityCount returns the IdentityCount field value if set, zero value otherwise.
func (o *RoleMiningEntitlement) GetIdentityCount() int32 {
	if o == nil || isNil(o.IdentityCount) {
		var ret int32
		return ret
	}
	return *o.IdentityCount
}

// GetIdentityCountOk returns a tuple with the IdentityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningEntitlement) GetIdentityCountOk() (*int32, bool) {
	if o == nil || isNil(o.IdentityCount) {
		return nil, false
	}
	return o.IdentityCount, true
}

// HasIdentityCount returns a boolean if a field has been set.
func (o *RoleMiningEntitlement) HasIdentityCount() bool {
	if o != nil && !isNil(o.IdentityCount) {
		return true
	}

	return false
}

// SetIdentityCount gets a reference to the given int32 and assigns it to the IdentityCount field.
func (o *RoleMiningEntitlement) SetIdentityCount(v int32) {
	o.IdentityCount = &v
}

// GetPopularity returns the Popularity field value if set, zero value otherwise.
func (o *RoleMiningEntitlement) GetPopularity() int32 {
	if o == nil || isNil(o.Popularity) {
		var ret int32
		return ret
	}
	return *o.Popularity
}

// GetPopularityOk returns a tuple with the Popularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningEntitlement) GetPopularityOk() (*int32, bool) {
	if o == nil || isNil(o.Popularity) {
		return nil, false
	}
	return o.Popularity, true
}

// HasPopularity returns a boolean if a field has been set.
func (o *RoleMiningEntitlement) HasPopularity() bool {
	if o != nil && !isNil(o.Popularity) {
		return true
	}

	return false
}

// SetPopularity gets a reference to the given int32 and assigns it to the Popularity field.
func (o *RoleMiningEntitlement) SetPopularity(v int32) {
	o.Popularity = &v
}

// GetPopularityInOrg returns the PopularityInOrg field value if set, zero value otherwise.
func (o *RoleMiningEntitlement) GetPopularityInOrg() int32 {
	if o == nil || isNil(o.PopularityInOrg) {
		var ret int32
		return ret
	}
	return *o.PopularityInOrg
}

// GetPopularityInOrgOk returns a tuple with the PopularityInOrg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningEntitlement) GetPopularityInOrgOk() (*int32, bool) {
	if o == nil || isNil(o.PopularityInOrg) {
		return nil, false
	}
	return o.PopularityInOrg, true
}

// HasPopularityInOrg returns a boolean if a field has been set.
func (o *RoleMiningEntitlement) HasPopularityInOrg() bool {
	if o != nil && !isNil(o.PopularityInOrg) {
		return true
	}

	return false
}

// SetPopularityInOrg gets a reference to the given int32 and assigns it to the PopularityInOrg field.
func (o *RoleMiningEntitlement) SetPopularityInOrg(v int32) {
	o.PopularityInOrg = &v
}

func (o RoleMiningEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EntitlementRef) {
		toSerialize["entitlementRef"] = o.EntitlementRef
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ApplicationName) {
		toSerialize["applicationName"] = o.ApplicationName
	}
	if !isNil(o.IdentityCount) {
		toSerialize["identityCount"] = o.IdentityCount
	}
	if !isNil(o.Popularity) {
		toSerialize["popularity"] = o.Popularity
	}
	if !isNil(o.PopularityInOrg) {
		toSerialize["popularityInOrg"] = o.PopularityInOrg
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RoleMiningEntitlement) UnmarshalJSON(bytes []byte) (err error) {
	varRoleMiningEntitlement := _RoleMiningEntitlement{}

	if err = json.Unmarshal(bytes, &varRoleMiningEntitlement); err == nil {
		*o = RoleMiningEntitlement(varRoleMiningEntitlement)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "entitlementRef")
		delete(additionalProperties, "name")
		delete(additionalProperties, "applicationName")
		delete(additionalProperties, "identityCount")
		delete(additionalProperties, "popularity")
		delete(additionalProperties, "popularityInOrg")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleMiningEntitlement struct {
	value *RoleMiningEntitlement
	isSet bool
}

func (v NullableRoleMiningEntitlement) Get() *RoleMiningEntitlement {
	return v.value
}

func (v *NullableRoleMiningEntitlement) Set(val *RoleMiningEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMiningEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMiningEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMiningEntitlement(val *RoleMiningEntitlement) *NullableRoleMiningEntitlement {
	return &NullableRoleMiningEntitlement{value: val, isSet: true}
}

func (v NullableRoleMiningEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMiningEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


