/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointbetasdk

import (
	"encoding/json"
)

// SpConfigImportRequest struct for SpConfigImportRequest
type SpConfigImportRequest struct {
	// Name of JSON file containing the objects to be imported.
	Data string `json:"data"`
	Options *ImportOptions `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpConfigImportRequest SpConfigImportRequest

// NewSpConfigImportRequest instantiates a new SpConfigImportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpConfigImportRequest(data string) *SpConfigImportRequest {
	this := SpConfigImportRequest{}
	this.Data = data
	return &this
}

// NewSpConfigImportRequestWithDefaults instantiates a new SpConfigImportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpConfigImportRequestWithDefaults() *SpConfigImportRequest {
	this := SpConfigImportRequest{}
	return &this
}

// GetData returns the Data field value
func (o *SpConfigImportRequest) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SpConfigImportRequest) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *SpConfigImportRequest) SetData(v string) {
	o.Data = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SpConfigImportRequest) GetOptions() ImportOptions {
	if o == nil || isNil(o.Options) {
		var ret ImportOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigImportRequest) GetOptionsOk() (*ImportOptions, bool) {
	if o == nil || isNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SpConfigImportRequest) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given ImportOptions and assigns it to the Options field.
func (o *SpConfigImportRequest) SetOptions(v ImportOptions) {
	o.Options = &v
}

func (o SpConfigImportRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.Options) {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SpConfigImportRequest) UnmarshalJSON(bytes []byte) (err error) {
	varSpConfigImportRequest := _SpConfigImportRequest{}

	if err = json.Unmarshal(bytes, &varSpConfigImportRequest); err == nil {
		*o = SpConfigImportRequest(varSpConfigImportRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpConfigImportRequest struct {
	value *SpConfigImportRequest
	isSet bool
}

func (v NullableSpConfigImportRequest) Get() *SpConfigImportRequest {
	return v.value
}

func (v *NullableSpConfigImportRequest) Set(val *SpConfigImportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSpConfigImportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSpConfigImportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpConfigImportRequest(val *SpConfigImportRequest) *NullableSpConfigImportRequest {
	return &NullableSpConfigImportRequest{value: val, isSet: true}
}

func (v NullableSpConfigImportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpConfigImportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


