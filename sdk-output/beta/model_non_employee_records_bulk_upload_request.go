/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointbetasdk

import (
	"encoding/json"
)

// NonEmployeeRecordsBulkUploadRequest struct for NonEmployeeRecordsBulkUploadRequest
type NonEmployeeRecordsBulkUploadRequest struct {
	Data string `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _NonEmployeeRecordsBulkUploadRequest NonEmployeeRecordsBulkUploadRequest

// NewNonEmployeeRecordsBulkUploadRequest instantiates a new NonEmployeeRecordsBulkUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonEmployeeRecordsBulkUploadRequest(data string) *NonEmployeeRecordsBulkUploadRequest {
	this := NonEmployeeRecordsBulkUploadRequest{}
	this.Data = data
	return &this
}

// NewNonEmployeeRecordsBulkUploadRequestWithDefaults instantiates a new NonEmployeeRecordsBulkUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonEmployeeRecordsBulkUploadRequestWithDefaults() *NonEmployeeRecordsBulkUploadRequest {
	this := NonEmployeeRecordsBulkUploadRequest{}
	return &this
}

// GetData returns the Data field value
func (o *NonEmployeeRecordsBulkUploadRequest) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *NonEmployeeRecordsBulkUploadRequest) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *NonEmployeeRecordsBulkUploadRequest) SetData(v string) {
	o.Data = v
}

func (o NonEmployeeRecordsBulkUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NonEmployeeRecordsBulkUploadRequest) UnmarshalJSON(bytes []byte) (err error) {
	varNonEmployeeRecordsBulkUploadRequest := _NonEmployeeRecordsBulkUploadRequest{}

	if err = json.Unmarshal(bytes, &varNonEmployeeRecordsBulkUploadRequest); err == nil {
		*o = NonEmployeeRecordsBulkUploadRequest(varNonEmployeeRecordsBulkUploadRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNonEmployeeRecordsBulkUploadRequest struct {
	value *NonEmployeeRecordsBulkUploadRequest
	isSet bool
}

func (v NullableNonEmployeeRecordsBulkUploadRequest) Get() *NonEmployeeRecordsBulkUploadRequest {
	return v.value
}

func (v *NullableNonEmployeeRecordsBulkUploadRequest) Set(val *NonEmployeeRecordsBulkUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNonEmployeeRecordsBulkUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNonEmployeeRecordsBulkUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonEmployeeRecordsBulkUploadRequest(val *NonEmployeeRecordsBulkUploadRequest) *NullableNonEmployeeRecordsBulkUploadRequest {
	return &NullableNonEmployeeRecordsBulkUploadRequest{value: val, isSet: true}
}

func (v NullableNonEmployeeRecordsBulkUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonEmployeeRecordsBulkUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


